ù
PC:\Users\claud\source\repos\DataGenerator\DataGenerator.Core\Enums\Categories.cs
	namespace 	
DataGenerator
 
. 
Data 
. 
Enums "
{ 
public 

enum 

Categories 
{ 

Technology 
, 
House 
, 
Kids 
, 
Sports 
, 
Clothing		 
,		 
Beuty

 
,

 
Health 
, 
Books 
, 
Grossery 
, 
} 
} Þ=
IC:\Users\claud\source\repos\DataGenerator\DataGenerator.Core\Generator.cs
	namespace 	
DataGenerator
 
. 
Data 
{ 
public 

class 
	Generator 
: 

IGenerator '
{ 
public 
async 
Task 
< 
List 
< 
PersonModel *
>* +
>+ ,!
GetAllPersonListAsync- B
(B C
uintC G
quantityH P
)P Q
=> 
new 
Faker 
< 
PersonModel $
>$ %
(% &
)& '
. 
RuleFor 
( 
x 
=> 
x 
.  
PersonId  (
,( )
f* +
=>, .
Guid/ 3
.3 4
NewGuid4 ;
(; <
)< =
)= >
. 
RuleFor 
( 
x 
=> 
x 
.  
	FirstName  )
,) *
f+ ,
=>- /
f0 1
.1 2
Person2 8
.8 9
	FirstName9 B
)B C
. 
RuleFor 
( 
x 
=> 
x 
.  
LastName  (
,( )
f* +
=>, .
f/ 0
.0 1
Person1 7
.7 8
LastName8 @
)@ A
. 
RuleFor 
( 
x 
=> 
x 
.  
Age  #
,# $
f% &
=>' )
f* +
.+ ,
Random, 2
.2 3
UInt3 7
(7 8
$num8 :
,: ;
$num< >
)> ?
)? @
. 
RuleFor 
( 
x 
=> 
x 
.  
Birthday  (
,( )
f* +
=>, .
f/ 0
.0 1
Date1 5
.5 6

PastOffset6 @
(@ A
$numA C
)C D
)D E
. 
RuleFor 
( 
x 
=> 
x 
.  
Email  %
,% &
f' (
=>) +
f, -
.- .
Person. 4
.4 5
Email5 :
): ;
. 
RuleFor 
( 
x 
=> 
x 
.  
Avatar  &
,& '
f( )
=>* ,
f- .
.. /
Person/ 5
.5 6
Avatar6 <
)< =
. 
RuleFor 
( 
x 
=> 
x 
.  
City  $
,$ %
f& '
=>( *
f+ ,
., -
Person- 3
.3 4
Address4 ;
.; <
City< @
)@ A
. 
RuleFor 
( 
x 
=> 
x 
.  
Address  '
,' (
f) *
=>+ -
f. /
./ 0
Person0 6
.6 7
Address7 >
.> ?
Street? E
)E F
. 
RuleFor 
( 
x 
=> 
x 
.  
Phone  %
,% &
f' (
=>) +
f, -
.- .
Person. 4
.4 5
Phone5 :
): ;
. 
Generate 
( 
Convert !
.! "
ToInt32" )
() *
quantity* 2
)2 3
)3 4
. 
OrderBy 
( 
x 
=> 
x 
. 
	FirstName %
)% &
. 
ToList 
( 
) 
; 
public 
async 
Task 
< 
List 
< 
ProductModel +
>+ ,
>, -
GetAllProductList. ?
(? @
uint@ D
quantityE M
)M N
=>   
new   
Faker   
<   
ProductModel   %
>  % &
(  & '
)  ' (
.!! 
RuleFor!! 
(!! 
x!! 
=>!! 
x!! 
.!!  
	ProductId!!  )
,!!) *
f!!+ ,
=>!!- /
Guid!!0 4
.!!4 5
NewGuid!!5 <
(!!< =
)!!= >
)!!> ?
."" 
RuleFor"" 
("" 
x"" 
=>"" 
x"" 
.""  
ProductName""  +
,""+ ,
f""- .
=>""/ 1
f""2 3
.""3 4
Commerce""4 <
.""< =
ProductName""= H
(""H I
)""I J
)""J K
.## 
RuleFor## 
(## 
x## 
=>## 
x## 
.##  
ProductAdjective##  0
,##0 1
f##2 3
=>##4 6
f##7 8
.##8 9
Commerce##9 A
.##A B
ProductAdjective##B R
(##R S
)##S T
)##T U
.$$ 
RuleFor$$ 
($$ 
x$$ 
=>$$ 
x$$ 
.$$  
ProductDescription$$  2
,$$2 3
f$$4 5
=>$$6 8
f$$9 :
.$$: ;
Commerce$$; C
.$$C D
ProductDescription$$D V
($$V W
)$$W X
)$$X Y
.%% 
RuleFor%% 
(%% 
x%% 
=>%% 
x%% 
.%%  
Price%%  %
,%%% &
f%%' (
=>%%) +
f%%, -
.%%- .
Commerce%%. 6
.%%6 7
Price%%7 <
(%%< =
min%%= @
:%%@ A
$num%%B E
,%%E F
symbol%%G M
:%%M N
$str%%O R
)%%R S
)%%S T
.&& 
RuleFor&& 
(&& 
x&& 
=>&& 
x&& 
.&&  
Color&&  %
,&&% &
f&&' (
=>&&) +
f&&, -
.&&- .
Commerce&&. 6
.&&6 7
Color&&7 <
(&&< =
)&&= >
)&&> ?
.'' 
RuleFor'' 
('' 
x'' 
=>'' 
x'' 
.''  
Category''  (
,''( )
f''* +
=>'', .
Enum''/ 3
.''3 4
	GetValues''4 =
(''= >
typeof''> D
(''D E

Categories''E O
)''O P
)''P Q
.''Q R
GetValue''R Z
(''Z [
new''[ ^
Random''_ e
(''e f
)''f g
.''g h
Next''h l
(''l m
$num''m n
,''n o
$num''p q
)''q r
)''r s
.''s t
ToString''t |
(''| }
)''} ~
)''~ 
.(( 
RuleFor(( 
((( 
x(( 
=>(( 
x(( 
.((  
Material((  (
,((( )
f((* +
=>((, .
f((/ 0
.((0 1
Commerce((1 9
.((9 :
ProductMaterial((: I
(((I J
)((J K
)((K L
.)) 
Generate)) 
()) 
Convert)) !
.))! "
ToInt32))" )
())) *
quantity))* 2
)))2 3
)))3 4
.** 
OrderBy** 
(** 
x** 
=>** 
x** 
.** 
ProductName** '
)**' (
.++ 
ToList++ 
(++ 
)++ 
;++ 
},, 
}-- Œ
aC:\Users\claud\source\repos\DataGenerator\DataGenerator.Core\Interfaces\IDataGeneratorServices.cs
	namespace 	
DataGenerator
 
. 
Core 
. 

Interfaces '
{ 
public 

	interface "
IDataGeneratorServices +
{		 
Task

 
<

 
List

 
<

 
PersonModel

 
>

 
>

 #
GeneratePersonListAsync

  7
(

7 8
uint

8 <
quantity

= E
=

F G
$num

H I
)

I J
;

J K
Task 
< 
List 
< 
ProductModel 
> 
>  $
GenerateProductListAsync! 9
(9 :
uint: >
quantity? G
=H I
$numJ K
)K L
;L M
} 
} ©
UC:\Users\claud\source\repos\DataGenerator\DataGenerator.Core\Interfaces\IGenerator.cs
	namespace 	
DataGenerator
 
. 
Data 
. 

Interfaces '
{ 
public 

	interface 

IGenerator 
{		 
Task

 
<

 
List

 
<

 
PersonModel

 
>

 
>

 !
GetAllPersonListAsync

  5
(

5 6
uint

6 :
quantity

; C
)

C D
;

D E
Task 
< 
List 
< 
ProductModel 
> 
>  
GetAllProductList! 2
(2 3
uint3 7
quantity8 @
)@ A
;A B
} 
} Ë
RC:\Users\claud\source\repos\DataGenerator\DataGenerator.Core\Models\PersonModel.cs
	namespace 	
DataGenerator
 
. 
Core 
. 
Models #
{ 
public 

class 
PersonModel 
{ 
public 
Guid 
PersonId 
{ 
get "
;" #
set$ '
;' (
}) *
public 
string 
	FirstName 
{  !
get" %
;% &
set' *
;* +
}, -
public		 
string		 
LastName		 
{		  
get		! $
;		$ %
set		& )
;		) *
}		+ ,
public

 
uint

 
Age

 
{

 
get

 
;

 
set

 "
;

" #
}

$ %
public 
DateTimeOffset 
Birthday &
{' (
get) ,
;, -
set. 1
;1 2
}3 4
public 
string 
Email 
{ 
get !
;! "
set# &
;& '
}( )
public 
string 
Avatar 
{ 
get "
;" #
set$ '
;' (
}) *
public 
string 
Address 
{ 
get  #
;# $
set% (
;( )
}* +
public 
string 
City 
{ 
get  
;  !
set" %
;% &
}' (
public 
string 
Phone 
{ 
get !
;! "
set# &
;& '
}( )
} 
} °
SC:\Users\claud\source\repos\DataGenerator\DataGenerator.Core\Models\ProductModel.cs
	namespace 	
DataGenerator
 
. 
Data 
. 
Models #
{ 
public 

class 
ProductModel 
{ 
public 
Guid 
	ProductId 
{ 
get  #
;# $
set% (
;( )
}* +
public 
string 
ProductName !
{" #
get$ '
;' (
set) ,
;, -
}. /
public		 
string		 
ProductAdjective		 &
{		' (
get		) ,
;		, -
set		. 1
;		1 2
}		3 4
public

 
string

 
ProductDescription

 (
{

) *
get

+ .
;

. /
set

0 3
;

3 4
}

5 6
public 
string 
Price 
{ 
get !
;! "
set# &
;& '
}( )
public 
string 
Color 
{ 
get !
;! "
set# &
;& '
}( )
public 
string 
Material 
{  
get! $
;$ %
set& )
;) *
}+ ,
public 
string 
Category 
{  
get! $
;$ %
set& )
;) *
}+ ,
} 
} š
^C:\Users\claud\source\repos\DataGenerator\DataGenerator.Core\Services\DataGeneratorServices.cs
	namespace 	
DataGenerator
 
. 
Core 
. 
Services %
{		 
public

 

class

 !
DataGeneratorServices

 &
:

' ("
IDataGeneratorServices

) ?
{ 
private 
readonly 

IGenerator #

_generator$ .
;. /
public !
DataGeneratorServices $
($ %

IGenerator% /
	generator0 9
)9 :
{ 	

_generator 
= 
	generator "
;" #
} 	
public 
async 
Task 
< 
List 
< 
PersonModel *
>* +
>+ ,#
GeneratePersonListAsync- D
(D E
uintE I
quantityJ R
=S T
$numU V
)V W
=> 
await 

_generator 
.  !
GetAllPersonListAsync  5
(5 6
quantity6 >
)> ?
;? @
public   
async   
Task   
<   
List   
<   
ProductModel   +
>  + ,
>  , -$
GenerateProductListAsync  . F
(  F G
uint  G K
quantity  L T
=  U V
$num  W X
)  X Y
=>!! 
await!! 

_generator!! 
.!!  
GetAllProductList!!  1
(!!1 2
quantity!!2 :
)!!: ;
;!!; <
}"" 
}## 